generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_PRISMA_URL")
  directUrl         = env("POSTGRES_URL_NON_POOLING")
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id             Int           @id @default(autoincrement())
  name           String
  email          String        @unique
  hashedPassword String
  image          String?
  userAccounts   UserAccount[]
  transactions   Transaction[]
  budgets        Budget[]
  goals          Goal[]
  reminders      Reminder[]
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  @@map(name: "users")
}

model UserAccount {
  id           Int                 @id @default(autoincrement())
  name         String
  balance      Float
  userId       Int
  user         User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]
  category     UserAccountCategory @default(CHECKING)
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt

  @@map(name: "userAccounts")
}

model Transaction {
  id          Int                  @id @default(autoincrement())
  amount      Float
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  description String
  category    NotificationCategory @default(OTHER)
  accountId   Int
  account     UserAccount          @relation(fields: [accountId], references: [id], onDelete: Cascade)
  userId      Int
  user        User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  isIncome    Boolean              @default(false)

  @@map(name: "transactions")
}

model Budget {
  id           Int                  @id @default(autoincrement())
  budgetAmount Float
  spentAmount  Float
  userId       Int
  user         User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  category     NotificationCategory @default(OTHER)
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt

  @@map(name: "budgets")
}

model Goal {
  id            Int      @id @default(autoincrement())
  name          String
  goalAmount    Float
  currentAmount Float
  userId        Int
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map(name: "goals")
}

model Reminder {
  id           Int      @id @default(autoincrement())
  title        String
  description  String
  amount       Float
  reminderDate DateTime
  userId       Int
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  isRead       Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  isIncome     Boolean

  @@map(name: "reminders")
}

enum NotificationCategory {
  FOOD
  TRANSPORTATION
  ENTERTAINMENT
  UTILITIES
  SHOPPING
  HOUSING
  OTHER

  @@map(name: "notificationCategories")
}

enum UserAccountCategory {
  CHECKING
  SAVINGS
  CREDIT_CARD
  INVESTMENT
  LOAN
  OTHER

  @@map(name: "userAccountCategories")
}
