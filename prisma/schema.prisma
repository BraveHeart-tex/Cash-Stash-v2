generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id             String        @id @default(cuid())
  name           String
  email          String        @unique
  hashedPassword String
  email_verified Boolean       @default(false)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  budgets        Budget[]
  goals          Goal[]
  reminders      Reminder[]
  transactions   Transaction[]
  userAccounts   Account[]
  Session        Session[]
}

model EmailVerificationCode {
  id        String   @id @default(cuid())
  code      String
  userId    String   @unique
  email     String
  expiresAt DateTime

  @@index([userId], map: "emailVerificationCodes_userId_fkey")
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)

  @@index([userId], map: "sessions_userId_fkey")
}

model Account {
  id           String          @id @default(cuid())
  name         String
  balance      Float
  userId       String
  category     AccountCategory @default(CHECKING)
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  transactions Transaction[]
  user         User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "userAccounts_userId_fkey")
}

model Transaction {
  id          String              @id @default(cuid())
  amount      Float
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  description String
  category    TransactionCategory @default(OTHER)
  accountId   String
  userId      String
  account     Account             @relation(fields: [accountId], references: [id], onDelete: Cascade)
  user        User                @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([accountId], map: "transactions_accountId_fkey")
  @@index([userId], map: "transactions_userId_fkey")
}

model Budget {
  id           String         @id @default(cuid())
  name         String
  budgetAmount Float
  spentAmount  Float
  userId       String
  progress     Float          @default(0)
  category     BudgetCategory @default(OTHER)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "budgets_userId_fkey")
}

model Goal {
  id            String   @id @default(cuid())
  name          String
  goalAmount    Float
  currentAmount Float
  progress      Float    @default(0)
  userId        String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "goals_userId_fkey")
}

model Reminder {
  id             String    @id @default(cuid())
  title          String
  description    String
  reminderDate   DateTime
  userId         String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  markedAsReadAt DateTime?
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "reminders_userId_fkey")
}

enum BudgetCategory {
  FOOD
  TRANSPORTATION
  ENTERTAINMENT
  UTILITIES
  SHOPPING
  HOUSING
  OTHER
}

enum TransactionCategory {
  FOOD
  TRANSPORTATION
  ENTERTAINMENT
  UTILITIES
  SHOPPING
  HOUSING
  OTHER
}

enum NotificationCategory {
  FOOD
  TRANSPORTATION
  ENTERTAINMENT
  UTILITIES
  SHOPPING
  HOUSING
  OTHER
}

enum AccountCategory {
  CHECKING
  SAVINGS
  CREDIT_CARD
  INVESTMENT
  LOAN
  OTHER
}
